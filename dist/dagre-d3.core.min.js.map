{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","lib/arrows.js","lib/create-clusters.js","lib/create-edge-labels.js","lib/create-edge-paths.js","lib/create-nodes.js","lib/d3.js","lib/dagre.js","lib/graphlib.js","lib/intersect/index.js","lib/intersect/intersect-circle.js","lib/intersect/intersect-ellipse.js","lib/intersect/intersect-line.js","lib/intersect/intersect-node.js","lib/intersect/intersect-polygon.js","lib/intersect/intersect-rect.js","lib/label/add-html-label.js","lib/label/add-label.js","lib/label/add-svg-label.js","lib/label/add-text-label.js","lib/lodash.js","lib/position-clusters.js","lib/position-edge-labels.js","lib/position-nodes.js","lib/render.js","lib/shapes.js","lib/util.js","lib/version.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dagreD3","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","graphlib","dagre","intersect","render","util","version","normal","parent","id","edge","type","marker","append","attr","path","style","applyStyle","vee","undirected","default","createClusters","selection","clusters","nodes","filter","v","isSubgraph","svgClusters","selectAll","data","remove","enter","node","applyTransition","each","thisGroup","d3","select","labelGroup","addLabel","clusterLabelPos","c","domCluster","exit","createEdgeLabels","svgEdgeLabels","edges","edgeToId","classed","label","bbox","getBBox","labelId","_","has","width","height","createEdgePaths","arrows","svgPaths","domEdge","elem","applyClass","arrowheadId","uniqueId","makeFragmentRef","location","href","calcPoints","arrowhead","url","fragmentId","baseUrl","split","tail","head","w","points","slice","unshift","intersectNode","push","createLine","line","x","d","y","curve","lineCurve","getCoords","matrix","ownerSVGElement","getScreenCTM","inverse","multiply","translate","svgPathsEnter","sourceElem","range","map","svgPathExit","source","getTotalLength","createNodes","shapes","simpleNodes","svgNodes","labelDom","shape","pick","paddingLeft","paddingRight","paddingTop","paddingBottom","shapeSvg","shapeBBox","circle","ellipse","polygon","rect","intersectCircle","rx","point","intersectEllipse","ry","cx","cy","px","py","det","Math","sqrt","dx","abs","dy","intersectLine","p1","p2","q1","q2","a1","a2","b1","b2","c1","c2","r1","r2","r3","r4","denom","offset","num","sameSign","intersectPolygon","polyPoints","x1","y1","intersections","minX","Number","POSITIVE_INFINITY","minY","forEach","entry","min","left","top","sort","p","q","pdx","pdy","distp","qdx","qdy","distq","console","log","intersectRect","sx","sy","h","addHtmlLabel","root","fo","div","insert","html","labelStyle","client","_groups","getBoundingClientRect","labelSvg","labelType","addSVGLabel","addTextLabel","labelBBox","domNode","appendChild","lines","processEscapeSequences","text","ch","newText","escaped","lodash","positionClusters","created","positionEdgeLabels","positionNodes","fn","svg","preProcessGraph","outputGroup","createOrSelectGroup","clustersGroup","edgePathsGroup","edgeLabels","layout","postProcessGraph","value","arguments","children","defaults","paddingX","paddingY","padding","NODE_DEFAULT_ATTRS","k","_prevWidth","_prevHeight","EDGE_DEFAULT_ATTRS","name","empty","curveLinear","max","diamond","SQRT2","join","escapeId","str","String","replace","ID_DELIM","dom","styleFn","classFn","otherClasses","graph","isPlainObject","transition","isFunction"],"mappings":"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","file":"dagre-d3.core.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @license\n * Copyright (c) 2012-2013 Chris Pettitt\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nmodule.exports =  {\n  graphlib: require(\"./lib/graphlib\"),\n  dagre: require(\"./lib/dagre\"),\n  intersect: require(\"./lib/intersect\"),\n  render: require(\"./lib/render\"),\n  util: require(\"./lib/util\"),\n  version: require(\"./lib/version\")\n};\n","var util = require(\"./util\");\n\nmodule.exports = {\n  \"default\": normal,\n  \"normal\": normal,\n  \"vee\": vee,\n  \"undirected\": undirected\n};\n\nfunction normal(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\nfunction vee(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 0 L 10 5 L 0 10 L 4 5 z\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n\nfunction undirected(parent, id, edge, type) {\n  var marker = parent.append(\"marker\")\n    .attr(\"id\", id)\n    .attr(\"viewBox\", \"0 0 10 10\")\n    .attr(\"refX\", 9)\n    .attr(\"refY\", 5)\n    .attr(\"markerUnits\", \"strokeWidth\")\n    .attr(\"markerWidth\", 8)\n    .attr(\"markerHeight\", 6)\n    .attr(\"orient\", \"auto\");\n\n  var path = marker.append(\"path\")\n    .attr(\"d\", \"M 0 5 L 10 5\")\n    .style(\"stroke-width\", 1)\n    .style(\"stroke-dasharray\", \"1,0\");\n  util.applyStyle(path, edge[type + \"Style\"]);\n  if (edge[type + \"Class\"]) {\n    path.attr(\"class\", edge[type + \"Class\"]);\n  }\n}\n","var util = require(\"./util\"),\n    addLabel = require(\"./label/add-label\");\n\nmodule.exports = createClusters;\n\nfunction createClusters(selection, g) {\n  var clusters = g.nodes().filter(function(v) { return util.isSubgraph(g, v); }),\n      svgClusters = selection.selectAll(\"g.cluster\")\n        .data(clusters, function(v) { return v; });\n\n  svgClusters.selectAll(\"*\").remove();\n  svgClusters.enter()\n    .append(\"g\")\n      .attr(\"class\", \"cluster\")\n      .attr(\"id\",function(v){\n          var node = g.node(v);\n          return node.id;\n      })\n      .style(\"opacity\", 0);\n  \n  svgClusters = selection.selectAll(\"g.cluster\");\n\n  util.applyTransition(svgClusters, g)\n    .style(\"opacity\", 1);\n\n  svgClusters.each(function(v) {\n    var node = g.node(v),\n        thisGroup = d3.select(this);\n    d3.select(this).append(\"rect\");\n    var labelGroup = thisGroup.append(\"g\").attr(\"class\", \"label\");\n    addLabel(labelGroup, node, node.clusterLabelPos);\n  });\n\n  svgClusters.selectAll(\"rect\").each(function(c) {\n    var node = g.node(c);\n    var domCluster = d3.select(this);\n    util.applyStyle(domCluster, node.style);\n  });\n\n  util.applyTransition(svgClusters.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgClusters;\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    addLabel = require(\"./label/add-label\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = createEdgeLabels;\n\nfunction createEdgeLabels(selection, g) {\n  var svgEdgeLabels = selection.selectAll(\"g.edgeLabel\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n    .classed(\"update\", true);\n\n  svgEdgeLabels.selectAll(\"*\").remove();\n  svgEdgeLabels.enter()\n    .append(\"g\")\n      .classed(\"edgeLabel\", true)\n      .style(\"opacity\", 0);\n\n  svgEdgeLabels = selection.selectAll(\"g.edgeLabel\");\n  \n  svgEdgeLabels.each(function(e) {\n    var edge = g.edge(e),\n        label = addLabel(d3.select(this), g.edge(e), 0, 0).classed(\"label\", true),\n        bbox = label.node().getBBox();\n\n    if (edge.labelId) { label.attr(\"id\", edge.labelId); }\n    if (!_.has(edge, \"width\")) { edge.width = bbox.width; }\n    if (!_.has(edge, \"height\")) { edge.height = bbox.height; }\n  });\n\n  util.applyTransition(svgEdgeLabels.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgEdgeLabels;\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    intersectNode = require(\"./intersect/intersect-node\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\nmodule.exports = createEdgePaths;\n\nfunction createEdgePaths(selection, g, arrows) {\n  var svgPaths = selection.selectAll(\"g.edgePath\")\n    .data(g.edges(), function(e) { return util.edgeToId(e); })\n    .classed(\"update\", true);\n\n  enter(svgPaths, g);\n  exit(svgPaths, g);\n\n  svgPaths = selection.selectAll(\"g.edgePath\");\n\n  util.applyTransition(svgPaths, g)\n    .style(\"opacity\", 1);\n\n  // Save DOM element in the path group, and set ID and class\n  svgPaths.each(function(e) {\n    var domEdge = d3.select(this);\n    var edge = g.edge(e);\n    edge.elem = this;\n\n    if (edge.id) {\n      domEdge.attr(\"id\", edge.id);\n    }\n\n    util.applyClass(domEdge, edge[\"class\"],\n      (domEdge.classed(\"update\") ? \"update \" : \"\") + \"edgePath\");\n  });\n\n  svgPaths.selectAll(\"path.path\")\n    .each(function(e) {\n      var edge = g.edge(e);\n      edge.arrowheadId = _.uniqueId(\"arrowhead\");\n\n      var domEdge = d3.select(this)\n        .attr(\"marker-end\", function() {\n            return \"url(\" + makeFragmentRef(location.href, edge.arrowheadId) + \")\";\n        })\n        .style(\"fill\", \"none\");\n\n      util.applyTransition(domEdge, g)\n        .attr(\"d\", function(e) { return calcPoints(g, e); });\n\n      util.applyStyle(domEdge, edge.style);\n    });\n\n  svgPaths.selectAll(\"defs *\").remove();\n  svgPaths.selectAll(\"defs\")\n    .each(function(e) {\n      var edge = g.edge(e),\n          arrowhead = arrows[edge.arrowhead];\n      arrowhead(d3.select(this), edge.arrowheadId, edge, \"arrowhead\");\n    });\n\n  return svgPaths;\n}\n\nfunction makeFragmentRef(url, fragmentId) {\n  var baseUrl = url.split(\"#\")[0];\n  return baseUrl + \"#\" + fragmentId;\n}\n\nfunction calcPoints(g, e) {\n  var edge = g.edge(e),\n      tail = g.node(e.v),\n      head = g.node(e.w),\n      points = edge.points.slice(1, edge.points.length - 1);\n  points.unshift(intersectNode(tail, points[0]));\n  points.push(intersectNode(head, points[points.length - 1]));\n\n  return createLine(edge, points);\n}\n\nfunction createLine(edge, points) {\n  var line = d3.line()\n    .x(function(d) { return d.x; })\n    .y(function(d) { return d.y; });\n  \n  line.curve(edge.lineCurve);\n\n  return line(points);\n}\n\nfunction getCoords(elem) {\n  var bbox = elem.getBBox(),\n      matrix = elem.ownerSVGElement.getScreenCTM()\n        .inverse()\n        .multiply(elem.getScreenCTM())\n        .translate(bbox.width / 2, bbox.height / 2);\n  return { x: matrix.e, y: matrix.f };\n}\n\nfunction enter(svgPaths, g) {\n  var svgPathsEnter = svgPaths.enter()\n    .append(\"g\")\n      .attr(\"class\", \"edgePath\")\n      .style(\"opacity\", 0);\n  svgPathsEnter.append(\"path\")\n    .attr(\"class\", \"path\")\n    .attr(\"d\", function(e) {\n      var edge = g.edge(e),\n          sourceElem = g.node(e.v).elem,\n          points = _.range(edge.points.length).map(function() { return getCoords(sourceElem); });\n      return createLine(edge, points);\n    });\n  svgPathsEnter.append(\"defs\");\n}\n\nfunction exit(svgPaths, g) {\n  var svgPathExit = svgPaths.exit();\n  util.applyTransition(svgPathExit, g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  util.applyTransition(svgPathExit.select(\"path.path\"), g)\n    .attr(\"d\", function(e) {\n      var source = g.node(e.v);\n\n      if (source) {\n        var points = _.range(this.getTotalLength()).map(function() { return source; });\n        return createLine({}, points);\n      } else {\n        return d3.select(this).attr(\"d\");\n      }\n    });\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    addLabel = require(\"./label/add-label\"),\n    util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = createNodes;\n\nfunction createNodes(selection, g, shapes) {\n  var simpleNodes = g.nodes().filter(function(v) { return !util.isSubgraph(g, v); });\n  var svgNodes = selection.selectAll(\"g.node\")\n    .data(simpleNodes, function(v) { return v; })\n    .classed(\"update\", true);\n\n  svgNodes.selectAll(\"*\").remove();\n\n  svgNodes.enter()\n    .append(\"g\")\n      .attr(\"class\", \"node\")\n      .style(\"opacity\", 0);\n\n  svgNodes = selection.selectAll(\"g.node\"); \n\n  svgNodes.each(function(v) {\n    var node = g.node(v),\n        thisGroup = d3.select(this),\n        labelGroup = thisGroup.append(\"g\").attr(\"class\", \"label\"),\n        labelDom = addLabel(labelGroup, node),\n        shape = shapes[node.shape],\n        bbox = _.pick(labelDom.node().getBBox(), \"width\", \"height\");\n    node.elem = this;\n\n    if (node.id) { thisGroup.attr(\"id\", node.id); }\n    if (node.labelId) { labelGroup.attr(\"id\", node.labelId); }\n    util.applyClass(thisGroup, node[\"class\"],\n      (thisGroup.classed(\"update\") ? \"update \" : \"\") + \"node\");\n\n    if (_.has(node, \"width\")) { bbox.width = node.width; }\n    if (_.has(node, \"height\")) { bbox.height = node.height; }\n\n    bbox.width += node.paddingLeft + node.paddingRight;\n    bbox.height += node.paddingTop + node.paddingBottom;\n    labelGroup.attr(\"transform\", \"translate(\" +\n      ((node.paddingLeft - node.paddingRight) / 2) + \",\" +\n      ((node.paddingTop - node.paddingBottom) / 2) + \")\");\n\n    var shapeSvg = shape(d3.select(this), bbox, node);\n    util.applyStyle(shapeSvg, node.style);\n\n    var shapeBBox = shapeSvg.node().getBBox();\n    node.width = shapeBBox.width;\n    node.height = shapeBBox.height;\n  });\n\n  util.applyTransition(svgNodes.exit(), g)\n    .style(\"opacity\", 0)\n    .remove();\n\n  return svgNodes;\n}\n","// Stub to get D3 either via NPM or from the global object\nvar d3;\n\nif( require) {\n    try {\n        d3 = require('d3');\n    } catch( e) {}\n}\n\nif(!d3) {\n    d3 = window.d3;\n}\n\nmodule.exports = d3;\n","/* global window */\n\nvar dagre;\n\nif (require) {\n  try {\n    dagre = require(\"dagre\");\n  } catch (e) {}\n}\n\nif (!dagre) {\n  dagre = window.dagre;\n}\n\nmodule.exports = dagre;\n","/* global window */\n\nvar graphlib;\n\nif (require) {\n  try {\n    graphlib = require(\"graphlib\");\n  } catch (e) {}\n}\n\nif (!graphlib) {\n  graphlib = window.graphlib;\n}\n\nmodule.exports = graphlib;\n","module.exports = {\n  node: require(\"./intersect-node\"),\n  circle: require(\"./intersect-circle\"),\n  ellipse: require(\"./intersect-ellipse\"),\n  polygon: require(\"./intersect-polygon\"),\n  rect: require(\"./intersect-rect\")\n};\n","var intersectEllipse = require(\"./intersect-ellipse\");\n\nmodule.exports = intersectCircle;\n\nfunction intersectCircle(node, rx, point) {\n  return intersectEllipse(node, rx, rx, point);\n}\n","module.exports = intersectEllipse;\n\nfunction intersectEllipse(node, rx, ry, point) {\n  // Formulae from: http://mathworld.wolfram.com/Ellipse-LineIntersection.html\n\n  var cx = node.x;\n  var cy = node.y;\n\n  var px = cx - point.x;\n  var py = cy - point.y;\n\n  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);\n\n  var dx = Math.abs(rx * ry * px / det);\n  if (point.x < cx) {\n    dx = -dx;\n  }\n  var dy = Math.abs(rx * ry * py / det);\n  if (point.y < cy) {\n    dy = -dy;\n  }\n\n  return {x: cx + dx, y: cy + dy};\n}\n\n","module.exports = intersectLine;\n\n/*\n * Returns the point at which two lines, p and q, intersect or returns\n * undefined if they do not intersect.\n */\nfunction intersectLine(p1, p2, q1, q2) {\n  // Algorithm from J. Avro, (ed.) Graphics Gems, No 2, Morgan Kaufmann, 1994,\n  // p7 and p473.\n\n  var a1, a2, b1, b2, c1, c2;\n  var r1, r2 , r3, r4;\n  var denom, offset, num;\n  var x, y;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is F(x,y) = a1 x +\n  // b1 y + c1 = 0.\n  a1 = p2.y - p1.y;\n  b1 = p1.x - p2.x;\n  c1 = (p2.x * p1.y) - (p1.x * p2.y);\n\n  // Compute r3 and r4.\n  r3 = ((a1 * q1.x) + (b1 * q1.y) + c1);\n  r4 = ((a1 * q2.x) + (b1 * q2.y) + c1);\n\n  // Check signs of r3 and r4. If both point 3 and point 4 lie on\n  // same side of line 1, the line segments do not intersect.\n  if ((r3 !== 0) && (r4 !== 0) && sameSign(r3, r4)) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Compute a2, b2, c2 where line joining points 3 and 4 is G(x,y) = a2 x + b2 y + c2 = 0\n  a2 = q2.y - q1.y;\n  b2 = q1.x - q2.x;\n  c2 = (q2.x * q1.y) - (q1.x * q2.y);\n\n  // Compute r1 and r2\n  r1 = (a2 * p1.x) + (b2 * p1.y) + c2;\n  r2 = (a2 * p2.x) + (b2 * p2.y) + c2;\n\n  // Check signs of r1 and r2. If both point 1 and point 2 lie\n  // on same side of second line segment, the line segments do\n  // not intersect.\n  if ((r1 !== 0) && (r2 !== 0) && (sameSign(r1, r2))) {\n    return /*DONT_INTERSECT*/;\n  }\n\n  // Line segments intersect: compute intersection point.\n  denom = (a1 * b2) - (a2 * b1);\n  if (denom === 0) {\n    return /*COLLINEAR*/;\n  }\n\n  offset = Math.abs(denom / 2);\n\n  // The denom/2 is to get rounding instead of truncating. It\n  // is added or subtracted to the numerator, depending upon the\n  // sign of the numerator.\n  num = (b1 * c2) - (b2 * c1);\n  x = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);\n\n  num = (a2 * c1) - (a1 * c2);\n  y = (num < 0) ? ((num - offset) / denom) : ((num + offset) / denom);\n\n  return { x: x, y: y };\n}\n\nfunction sameSign(r1, r2) {\n  return r1 * r2 > 0;\n}\n","module.exports = intersectNode;\n\nfunction intersectNode(node, point) {\n  return node.intersect(point);\n}\n","var intersectLine = require(\"./intersect-line\");\n\nmodule.exports = intersectPolygon;\n\n/*\n * Returns the point ({x, y}) at which the point argument intersects with the\n * node argument assuming that it has the shape specified by polygon.\n */\nfunction intersectPolygon(node, polyPoints, point) {\n  var x1 = node.x;\n  var y1 = node.y;\n\n  var intersections = [];\n\n  var minX = Number.POSITIVE_INFINITY,\n      minY = Number.POSITIVE_INFINITY;\n  polyPoints.forEach(function(entry) {\n    minX = Math.min(minX, entry.x);\n    minY = Math.min(minY, entry.y);\n  });\n\n  var left = x1 - node.width / 2 - minX;\n  var top =  y1 - node.height / 2 - minY;\n\n  for (var i = 0; i < polyPoints.length; i++) {\n    var p1 = polyPoints[i];\n    var p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];\n    var intersect = intersectLine(node, point,\n      {x: left + p1.x, y: top + p1.y}, {x: left + p2.x, y: top + p2.y});\n    if (intersect) {\n      intersections.push(intersect);\n    }\n  }\n\n  if (!intersections.length) {\n    console.log(\"NO INTERSECTION FOUND, RETURN NODE CENTER\", node);\n    return node;\n  }\n\n  if (intersections.length > 1) {\n    // More intersections, find the one nearest to edge end point\n    intersections.sort(function(p, q) {\n      var pdx = p.x - point.x,\n          pdy = p.y - point.y,\n          distp = Math.sqrt(pdx * pdx + pdy * pdy),\n\n          qdx = q.x - point.x,\n          qdy = q.y - point.y,\n          distq = Math.sqrt(qdx * qdx + qdy * qdy);\n\n      return (distp < distq) ? -1 : (distp === distq ? 0 : 1);\n    });\n  }\n  return intersections[0];\n}\n","module.exports = intersectRect;\n\nfunction intersectRect(node, point) {\n  var x = node.x;\n  var y = node.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = node.width / 2;\n  var h = node.height / 2;\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = dy === 0 ? 0 : h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = dx === 0 ? 0 : w * dy / dx;\n  }\n\n  return {x: x + sx, y: y + sy};\n}\n","var util = require(\"../util\");\n\nmodule.exports = addHtmlLabel;\n\nfunction addHtmlLabel(root, node) {\n  var fo = root\n    .append(\"foreignObject\")\n      .attr(\"width\", \"100000\");\n\n  var div = fo\n    .append(\"xhtml:div\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n\n  var label = node.label;\n  switch(typeof label) {\n    case \"function\":\n      div.insert(label);\n      break;\n    case \"object\":\n      // Currently we assume this is a DOM object.\n      div.insert(function() { return label; });\n      break;\n    default: div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"inline-block\");\n  // Fix for firefox\n  div.style(\"white-space\", \"nowrap\");\n\n  var client = div._groups[0][0].getBoundingClientRect();\n  fo\n    .attr(\"width\", client.width)\n    .attr(\"height\", client.height); \n\n  return fo;\n}\n","var addTextLabel = require(\"./add-text-label\"),\n    addHtmlLabel = require(\"./add-html-label\"),\n    addSVGLabel  = require(\"./add-svg-label\");\n\nmodule.exports = addLabel;\n\nfunction addLabel(root, node, location) {\n  var label = node.label;\n  var labelSvg = root.append(\"g\");\n\n  // Allow the label to be a string, a function that returns a DOM element, or\n  // a DOM element itself.\n  if (node.labelType === \"svg\") {\n    addSVGLabel(labelSvg, node);\n  } else if (typeof label !== \"string\" || node.labelType === \"html\") {\n    addHtmlLabel(labelSvg, node);\n  } else {\n    addTextLabel(labelSvg, node);\n  }\n\n  var labelBBox = labelSvg.node().getBBox();\n  var y;\n  switch(location) {\n    case \"top\":\n      y = (-node.height / 2);\n      break;\n    case \"bottom\":\n      y = (node.height / 2) - labelBBox.height;\n      break;\n    default:\n      y = (-labelBBox.height / 2);\n  }\n  labelSvg.attr(\"transform\",\n                \"translate(\" + (-labelBBox.width / 2) + \",\" + y + \")\");\n\n  return labelSvg;\n}\n","var util = require(\"../util\");\n\nmodule.exports = addSVGLabel;\n\nfunction addSVGLabel(root, node) {\n  var domNode = root;\n\n  domNode.node().appendChild(node.label);\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n","var util = require(\"../util\");\n\nmodule.exports = addTextLabel;\n\n/*\n * Attaches a text label to the specified root. Handles escape sequences.\n */\nfunction addTextLabel(root, node) {\n  var domNode = root.append(\"text\");\n\n  var lines = processEscapeSequences(node.label).split(\"\\n\");\n  for (var i = 0; i < lines.length; i++) {\n    domNode\n      .append(\"tspan\")\n        .attr(\"xml:space\", \"preserve\")\n        .attr(\"dy\", \"1em\")\n        .attr(\"x\", \"1\")\n        .text(lines[i]);\n  }\n\n  util.applyStyle(domNode, node.labelStyle);\n\n  return domNode;\n}\n\nfunction processEscapeSequences(text) {\n  var newText = \"\",\n      escaped = false,\n      ch;\n  for (var i = 0; i < text.length; ++i) {\n    ch = text[i];\n    if (escaped) {\n      switch(ch) {\n        case \"n\": newText += \"\\n\"; break;\n        default: newText += ch;\n      }\n      escaped = false;\n    } else if (ch === \"\\\\\") {\n      escaped = true;\n    } else {\n      newText += ch;\n    }\n  }\n  return newText;\n}\n","/* global window */\n\nvar lodash;\n\nif (require) {\n  try {\n    lodash = require(\"lodash\");\n  } catch (e) {}\n}\n\nif (!lodash) {\n  lodash = window._;\n}\n\nmodule.exports = lodash;\n","\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = positionClusters;\n\nfunction positionClusters(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(v) {\n    var node = g.node(v);\n    return \"translate(\" + node.x + \",\" + node.y + \")\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n      .style(\"opacity\", 1)\n      .attr(\"transform\", translate);\n\n  util.applyTransition(created.selectAll(\"rect\"), g)\n      .attr(\"width\", function(v) { return g.node(v).width; })\n      .attr(\"height\", function(v) { return g.node(v).height; })\n      .attr(\"x\", function(v) {\n        var node = g.node(v);\n        return -node.width / 2;\n      })\n      .attr(\"y\", function(v) {\n        var node = g.node(v);\n        return -node.height / 2;\n      });\n\n}\n","\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\"),\n    _ = require(\"./lodash\");\n\nmodule.exports = positionEdgeLabels;\n\nfunction positionEdgeLabels(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(e) {\n    var edge = g.edge(e);\n    return _.has(edge, \"x\") ? \"translate(\" + edge.x + \",\" + edge.y + \")\" : \"\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n    .style(\"opacity\", 1)\n    .attr(\"transform\", translate);\n}\n","\"use strict\";\n\nvar util = require(\"./util\"),\n    d3 = require(\"./d3\");\n\nmodule.exports = positionNodes;\n\nfunction positionNodes(selection, g) {\n  var created = selection.filter(function() { return !d3.select(this).classed(\"update\"); });\n\n  function translate(v) {\n    var node = g.node(v);\n    return \"translate(\" + node.x + \",\" + node.y + \")\";\n  }\n\n  created.attr(\"transform\", translate);\n\n  util.applyTransition(selection, g)\n    .style(\"opacity\", 1)\n    .attr(\"transform\", translate);\n}\n","var _ = require(\"./lodash\"),\n    d3 = require(\"./d3\"),\n    layout = require(\"./dagre\").layout;\n\nmodule.exports = render;\n\n// This design is based on http://bost.ocks.org/mike/chart/.\nfunction render() {\n  var createNodes = require(\"./create-nodes\"),\n      createClusters = require(\"./create-clusters\"),\n      createEdgeLabels = require(\"./create-edge-labels\"),\n      createEdgePaths = require(\"./create-edge-paths\"),\n      positionNodes = require(\"./position-nodes\"),\n      positionEdgeLabels = require(\"./position-edge-labels\"),\n      positionClusters = require(\"./position-clusters\"),\n      shapes = require(\"./shapes\"),\n      arrows = require(\"./arrows\");\n\n  var fn = function(svg, g) {\n    preProcessGraph(g);\n\n    svg.selectAll(\"*\").remove();\n\n    var outputGroup = createOrSelectGroup(svg, \"output\"),\n        clustersGroup = createOrSelectGroup(outputGroup, \"clusters\"),\n        edgePathsGroup = createOrSelectGroup(outputGroup, \"edgePaths\"),\n        edgeLabels = createEdgeLabels(createOrSelectGroup(outputGroup, \"edgeLabels\"), g),\n        nodes = createNodes(createOrSelectGroup(outputGroup, \"nodes\"), g, shapes);\n\n    layout(g);\n\n    positionNodes(nodes, g);\n    positionEdgeLabels(edgeLabels, g);\n    createEdgePaths(edgePathsGroup, g, arrows);\n\n    var clusters = createClusters(clustersGroup, g);\n    positionClusters(clusters, g);\n\n    postProcessGraph(g);\n  };\n\n  fn.createNodes = function(value) {\n    if (!arguments.length) return createNodes;\n    createNodes = value;\n    return fn;\n  };\n\n  fn.createClusters = function(value) {\n    if (!arguments.length) return createClusters;\n    createClusters = value;\n    return fn;\n  };\n\n  fn.createEdgeLabels = function(value) {\n    if (!arguments.length) return createEdgeLabels;\n    createEdgeLabels = value;\n    return fn;\n  };\n\n  fn.createEdgePaths = function(value) {\n    if (!arguments.length) return createEdgePaths;\n    createEdgePaths = value;\n    return fn;\n  };\n\n  fn.shapes = function(value) {\n    if (!arguments.length) return shapes;\n    shapes = value;\n    return fn;\n  };\n\n  fn.arrows = function(value) {\n    if (!arguments.length) return arrows;\n    arrows = value;\n    return fn;\n  };\n\n  return fn;\n}\n\nvar NODE_DEFAULT_ATTRS = {\n  paddingLeft: 10,\n  paddingRight: 10,\n  paddingTop: 10,\n  paddingBottom: 10,\n  rx: 0,\n  ry: 0,\n  shape: \"rect\"\n};\n\nvar EDGE_DEFAULT_ATTRS = {\n  arrowhead: \"normal\",\n  lineCurve: d3.curveLinear\n};\n\nfunction preProcessGraph(g) {\n  g.nodes().forEach(function(v) {\n    var node = g.node(v);\n    if (!_.has(node, \"label\") && !g.children(v).length) { node.label = v; }\n\n    if (_.has(node, \"paddingX\")) {\n      _.defaults(node, {\n        paddingLeft: node.paddingX,\n        paddingRight: node.paddingX\n      });\n    }\n\n    if (_.has(node, \"paddingY\")) {\n      _.defaults(node, {\n        paddingTop: node.paddingY,\n        paddingBottom: node.paddingY\n      });\n    }\n\n    if (_.has(node, \"padding\")) {\n      _.defaults(node, {\n        paddingLeft: node.padding,\n        paddingRight: node.padding,\n        paddingTop: node.padding,\n        paddingBottom: node.padding\n      });\n    }\n\n    _.defaults(node, NODE_DEFAULT_ATTRS);\n\n    _.each([\"paddingLeft\", \"paddingRight\", \"paddingTop\", \"paddingBottom\"], function(k) {\n      node[k] = Number(node[k]);\n    });\n\n    // Save dimensions for restore during post-processing\n    if (_.has(node, \"width\")) { node._prevWidth = node.width; }\n    if (_.has(node, \"height\")) { node._prevHeight = node.height; }\n  });\n\n  g.edges().forEach(function(e) {\n    var edge = g.edge(e);\n    if (!_.has(edge, \"label\")) { edge.label = \"\"; }\n    _.defaults(edge, EDGE_DEFAULT_ATTRS);\n  });\n}\n\nfunction postProcessGraph(g) {\n  _.each(g.nodes(), function(v) {\n    var node = g.node(v);\n\n    // Restore original dimensions\n    if (_.has(node, \"_prevWidth\")) {\n      node.width = node._prevWidth;\n    } else {\n      delete node.width;\n    }\n\n    if (_.has(node, \"_prevHeight\")) {\n      node.height = node._prevHeight;\n    } else {\n      delete node.height;\n    }\n\n    delete node._prevWidth;\n    delete node._prevHeight;\n  });\n}\n\nfunction createOrSelectGroup(root, name) {\n  var selection = root.select(\"g.\" + name);\n  if (selection.empty()) {\n    selection = root.append(\"g\").attr(\"class\", name);\n  }\n  return selection;\n}\n","\"use strict\";\n\nvar intersectRect = require(\"./intersect/intersect-rect\"),\n    intersectEllipse = require(\"./intersect/intersect-ellipse\"),\n    intersectCircle = require(\"./intersect/intersect-circle\"),\n    intersectPolygon = require(\"./intersect/intersect-polygon\");\n\nmodule.exports = {\n  rect: rect,\n  ellipse: ellipse,\n  circle: circle,\n  diamond: diamond\n};\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent.insert(\"rect\", \":first-child\")\n        .attr(\"rx\", node.rx)\n        .attr(\"ry\", node.ry)\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"width\", bbox.width)\n        .attr(\"height\", bbox.height);\n\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2,\n      ry = bbox.height / 2,\n      shapeSvg = parent.insert(\"ellipse\", \":first-child\")\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"rx\", rx)\n        .attr(\"ry\", ry);\n\n  node.intersect = function(point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2,\n      shapeSvg = parent.insert(\"circle\", \":first-child\")\n        .attr(\"x\", -bbox.width / 2)\n        .attr(\"y\", -bbox.height / 2)\n        .attr(\"r\", r);\n\n  node.intersect = function(point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2,\n      h = (bbox.height * Math.SQRT2) / 2,\n      points = [\n        { x:  0, y: -h },\n        { x: -w, y:  0 },\n        { x:  0, y:  h },\n        { x:  w, y:  0 }\n      ],\n      shapeSvg = parent.insert(\"polygon\", \":first-child\")\n        .attr(\"points\", points.map(function(p) { return p.x + \",\" + p.y; }).join(\" \"));\n\n  node.intersect = function(p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n","var _ = require(\"./lodash\");\n\n// Public utility functions\nmodule.exports = {\n  isSubgraph: isSubgraph,\n  edgeToId: edgeToId,\n  applyStyle: applyStyle,\n  applyClass: applyClass,\n  applyTransition: applyTransition\n};\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + \":\" + escapeId(e.w) + \":\" + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, \"\\\\:\") : \"\";\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom\n      .attr(\"class\", classFn)\n      .attr(\"class\", otherClasses + \" \" + dom.attr(\"class\"));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n","module.exports = \"0.4.18-pre\";\n"]}